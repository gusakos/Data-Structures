 Εξηγήσεις πάνω στην εργασία.

Κλάση FileManager:
Αρχικά η  κλάση FileManager επιτρέπει την ανάγνωση του αρχείου σε επίπεδο block.
-Διαθέτει την στατική μέθοδο createFile() για την δημιουργία αρχείων εγγραφών, και την σωστή εγγραφή του header block.
Το header block περιέχει τον αριθμό των block του αρχείου, τον αριθμό των εγγραφών και το μέγεθος της κάθε εγγραφής σε bytes.
-Επιτρέπει την ανάγνωση/εγγραφή του αρχείου με τις μεθόδους readBlock() και writeBlock(). Οι μέθοδοι αυτές λειτουργούν μέσω ενος

ενδιάμεσου buffer, πεδίο της FileManager, στον οποίο διατηρούνται τα δεδομένα ανάγνωσης και εγγραφής αρχείου. Η εγγραφή/ανάγνωση
ενος block γίνεται μεταξύ του αρχείου και αυτού του buffer. Τα περιεχόμενα του buffer μπορούν να διαβαστούν/αλλάξουν με 
τις μεθόδους setBuffer() και copyBuffer().

-Κάθε στυγμιότυπο της κλάσης FileManager μπορεί να φιλοξενεί μέχρι ένα ανοιχτό αρχείο. Για τον χειρισμό περισσοτέρων αρχείων ταυτόχρονα,
απαιτείται η δημιουργία περισσοτέρων στιγμιοτύπων της κλάσης.

-Τελος, η κλάση διαθέτει μετρητές disk_writes και disk_reads, οι οποίοι μετρούν τις φορές που η κλάση διάβασε/εγγραψε στο δίσκο. Οι μετρητές αυτοί
έχουν δυνατότητα μηδενισμού επιτρέποντας την πιο λεπτομερή καταγραφή της χρήσης του δίσκου στα διάφορα σημεία του προγράμματος

Κλάση RecordFileManager:
Η κλάση RecordFileManager αποτελεί επέκταση της FileManager και επιτρέπει την ανάγνωση και επεξεργασία αρχείων σε επίπεδο εγγραφών.
-Διαθέτει τις μεθόδους readRecord() και writeRecord() για την ανάγνωση εγγραφών, καθώς και εναν ακόμη buffer εγγραφών, τον οποίο μπορούμε να επεξεργαστούμε με τις μεθόδους setRecordBuffer() και copyRecordBuffer(). Η writeRecord() επιστρέφει τον αριθμό
του block στο οποίο έγινε η εγγραφή επιτρέποντας έτσι την δημιουργία πολύπλοκων δομών δεδομένων με αυτή την πληροφορία (οργάνωση Β και Δ)

-Η εγγραφή σε αρχείο δεν ακολουθεί της κλήσεις των writeRecord() αλλα γίνεται ετεροχρονισμένα, έτσι ώστε να μην υπάρχουν πολλαπλά disk accesses
για αλλαγές στο ίδιο block.

-Επίσης η κλάση διαθέτει λειτουργία εξωτερικής ταξινόμησης με τη μέθοδο sort().

-Τέλος, οι μέθοδοι searchRecord(), searchRecordBlock() και searchRecordBinary() επιτρέπουν την αναζήτηση μιας εγγραφής στο αρχείο, σειριακά σε ολο το αρχείο,
σειριακά σε ενα μονο block του αρχείου η με δυαδική αναζήτηση στο αρχείο αντίστοιχα. Η δυαδική αναζήτηση λειτουργεί σωστά εφόσον το αρχείο είναι ταξινομημένο.


Οι παραπάνω κλάσεις αντιμετωπίζουν τις εγγραφές και τα blocks ως μια ακολουθία απο bytes. 
Για αυτό το λόγο υπάρχουν οι επόμενες 2 κλάσεις για να βοηθήσουν τον προγραμματιστή στην επεξεργασία των δεδομένων.

-Η κλάση ByteHelp είναι μια συλλογή απο στατικές μεθόδους οι οποίες επιτρέπουν την εγγραφή και ανάγνωση τιμών
απο πίνακες byte[]. Οι μέθοδοι της "σπάνε" η επανασυναρμολογούν σε/απο bytes τις τιμές που επιθημεί ο προγραμματιστής
να γράψει στον πίνακα. Οι λειτουργίες αυτές γίνονται με bitwise operators.

-Η κλάση Record, είναι μια abstract κλάση που αποτελεί parent για όλους τους τύπους διαφορετικών Record που χρειαζόμαστε για να γράψουμε  στο αρχείο. Διαθέτει τις μεθόδους Load() και Serialize() οι οποίες μετατρέπουν την κλάση από και προς ενα πίνακα byte. Η υλοποίηση αυτών των μεθόδων διαφέρει απο record σε record με τη  σταθερή παραδοχή να είναι οτι κάθε Record διαθέτει ενα ακέραιο κλειδί το οποίο τοποθετείται στην αρχή του πίνακα απο byte.

Εξωτερική Ταξινόμηση:
Αρχικά να αναφερθεί ότι για την υλοποίηση της συγκεκριμένης μεθόδου χρειάστηκα τη βοήθεια ενός συναδέλφου 2οετή φοιτητή της σχολής μας ο οποίος γνώριζε την συγκεκριμένη μέθοδο από δικές του δραστηριότητες

Για την εξωτερική ταξινόμιση υλοποιήθηκε ο αλγόριθμος external Merge-Sort.
-Ο αλγοριθμός αυτός αποτελείται απο μια αρχική ταξινόμηση του κάθε block του αρχείου ξεχωριστά. [ blockPass() ]
-Έπειτα εκτελούνται πολλαπλά περάσματα συγχώνευσης που κάθε φορά δημιουργούν ολοένα και μεγαλύτερες ακολουθίες
ταξινομημενων block. Τελικά, καταλήγουμε στην τελική, εντελώς ταξινομημένη ακολουθία, όλων των block του αρχικού αρχείου. [ mergePass() ]
Όλα αυτά τα περάσματα, χρειάζονται extra αποθηκευτικό χώρο για την προσωρινή αποθήκευση των αποτελεσμάτων τους,
για αυτο το λόγο τα περάσματα αποθηκεύονται εν-αλλαξ στα προσωρινά αρχεία "sortfile1" και "sortfile2", και το τελικό αποτέλεσμα
αντιγράφεται ξανά στο αρχικό αρχείο. Όλη αυτη η διαδικασία υλοποιήθηκε στο σώμα της μεθόδου sort() της RecordFileManager

-Ο λόγος που επιλέχθηκε αυτός ο τρόπος ταξινόμησης, είναι οι μειωμένη απαίτηση για RAM σε αντίθεση με την απλή αντιγραφή στη μνήμη και
ταξινόμιση του πίνακα. Ο συμβιβασμός είναι οτι η ανάγνωση/εγγραφη του δίσκου είναι αυξημένη στην μέθοδο που επιλέχθηκε. Η σχεδιαστική επιλογή
ήταν η χρήση μόνον τριών buffer μεγέθους μιας σελίδας για την external Merge Sort. Μια παραλλαγή με μεγαλύτερο αριθμό buffers θα έδινε μικρότερο disk I/O


Μέθοδος Main:

Στη μέθοδο αυτή υλοποιήθηκαν οι απαιτήσεις της εκφώνησης. Η μεταβλητή mode , η οποία παίρνει τιμές απο 0 εως 3, καθορίζει τον τρόπο οργάνωσης
του αρχείου. Κατόπιν εισάγονται οι τυχαίες εγγραφές και πραγματοποιείται αναζήτηση 20 εγγραφών. 

Για τις κυριες εγγραφές υλοποιήθηκε η κλάση MainRecord η οποία περιέχει ενα κλειδί και έναν χαρακτήρα που αντιπροσωπευει τα δεδομένα.
Για τις δευτερευουσες εγγραφές (στον τρόπο οργάνωσης Β και Δ) υλοποιήθηκε η PointerRecord που εκτός απο το κλειδί αποθηκεύει ακόμη εναν ακαίρεο (αντιπροσωπευεί τον αριθμό block της εγγραφής στο main αρχειο).

Στις μεθόδους οργάνωσης Γ και Δ εκτελείται η μέθοδος sort() μετά την εισαγωγή, στο κατάλληλο αρχείο,
και χρησιμοποιείται η μεθοδος searchRecordBinary() στην αναζήτηση αντι για την searchRecord().
Στις μεθόδους οργάνωσης Β και Δ δημιουργείται εκτός απο το main file, και το δευτερεύον ευρετήριο, η αναζήτηση
χωρίζεται στην αναζήτηση στο ευρετήριο και έπειτα στο κυρίως αρχείο με την μέθοδο searchRecordBlock().

Τα στατιστικά της χρήσης του δίσκου εμφανίζονται μετα απο κάθε λειτουργία της μεθοδου main() για το κάθε αρχείο ξεχωριστά


